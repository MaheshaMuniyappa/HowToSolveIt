                     ALGORITHM COMPUTERS         Arrays & Strings
                     -------------------         Topic - 6

[1.] Arrays:
     -------
     An array is a group of like-typed variales that are referred 
to  by a common name. Arrays of any type can be created  and  may 
have  one or more dimensions. A specific element in an  array  is 
accessed  by  its  index.  Arrays offer  a  convenient  means  of 
grouping related information.

One-Dimensional Arrays:
-----------------------
     A  One-dimensional  array is, essentially, a list  of  like-
typed  variables.  To create an array, you first must  create  an 
array  variable  of the desired type. The general form of  a  One 
dimensional array declaration is

     type var-name[];

Multidimensional Arrays:
------------------------
     In  java,  multidimensional arrays are  actually  arrays  of 
arrays.  To  declare a multidimensional array  variable,  specify 
each additional index using another set of square brackets.

Examples:
---------

[1.1] Listing 'InitArray.java'
// initializing an array with a declaration
import java.awt.Graphics;
import java.applet.Applet;

public class InitArray extends Applet {
   int n[] = { 32, 27, 64, 18, 95, 14, 90, 70, 60, 37 };        

   // paint the applet
   public void paint( Graphics g )
   {
      int yPosition = 25;   // starting y position on applet

      g.drawString( "Element", 25, yPosition );
      g.drawString( "Value", 100, yPosition );
   
      for ( int i = 0; i < n.length; i++ ) {
         yPosition += 15;
         g.drawString( String.valueOf( i ), 25, yPosition );
         g.drawString( String.valueOf( n[ i ] ),
                       100, yPosition );
      }
   }
}


[1.2] Listing of 'InitArray.java'
// initialize array s to the even integers from 2 to 20
import java.awt.Graphics;
import java.applet.Applet;

public class InitArray extends Applet {
   final int ARRAY_SIZE = 10;
   int s[];
   // initialize instance variables
   public void init()
   {
      s = new int[ ARRAY_SIZE ];
      // Set the values in the array
      for ( int i = 0; i < s.length; i++ ) 
         s[ i ] = 2 + 2 * i;
   }
   // paint the applet
   public void paint( Graphics g )
   {
      int yPosition = 25;   // starting y position on applet

      g.drawString( "Element", 25, yPosition );
      g.drawString( "Value", 100, yPosition );
   
      for ( int i = 0; i < s.length; i++ ) {
         yPosition += 15;
         g.drawString( String.valueOf( i ), 25, yPosition );
         g.drawString( String.valueOf( s[ i ] ),
                       100, yPosition );
      }
   }
}

[1.3] Listing of 'FinalTest.java'
// a final object must be initialized
import java.applet.Applet;

public class FinalTest extends Applet {
   final int x;  // Error: Final variables must be initialized
}

[1.4] Listing of 'FinalTest.java'
// using a properly initialized constant variable
import java.awt.Graphics;
import java.applet.Applet;

public class FinalTest extends Applet {
   final int x = 7;  // initialize constant variable

   public void paint( Graphics g )
   {
      g.drawString( "The value of x is: " + x, 25, 25 ); 
   }
}

[1.5] Listing of 'PassArray.java'
// Passing arrays and individual array elements to methods
import java.awt.Graphics;
import java.applet.Applet;

public class PassArray extends Applet {
   int a[] = {0, 1, 2, 3, 4};

   public void paint( Graphics g )
   {
      int xPosition = 25, yPosition = 25;

      g.drawString(
         "Effects of passing entire array call-by-reference:",
         xPosition, yPosition );
      yPosition += 15;
      g.drawString( "The values of the original array are:",
                    xPosition, yPosition );
      xPosition += 15;
      yPosition += 15;

      for ( int i = 0; i < a.length; i++ ) {
         g.drawString( String.valueOf( a[ i ] ),
                       xPosition, yPosition );
         xPosition += 15;
      }
   
      xPosition = 25;
      yPosition += 30;

      modifyArray( a );  // array a passed call-by-reference
   
      g.drawString( "The values of the modified array are:",
                    xPosition, yPosition );   
      xPosition += 15;
      yPosition += 15;

      for ( int i = 0; i < a.length; i++ ) {
         g.drawString( String.valueOf( a[ i ] ),
                       xPosition, yPosition );
         xPosition += 15;
      }
   
      xPosition = 25;
      yPosition += 30;

      g.drawString(
         "Effects of passing array element call-by-value:",
         xPosition, yPosition );
      yPosition += 15;
      g.drawString( "a[3] before modifyElement: " + a[ 3 ],
                    xPosition, yPosition );
      yPosition += 15;
   
      modifyElement( a[ 3 ] );
   
      g.drawString( "a[3] after modifyElement: " + a[ 3 ],
                    xPosition, yPosition );
   }
   public void modifyArray( int b[] )
   {
      for ( int j = 0; j < b.length; j++ )
         b[ j ] *= 2;
   }
   
   public void modifyElement( int e )
   {
      e *= 2;
   }   
}

[1.6] Listing of 'InitArray.java'
// Initializing multidimensional arrays
import java.awt.Graphics;
import java.applet.Applet;

public class InitArray extends Applet {

   // paint the applet
   public void paint( Graphics g )
   { 
      int array1[][] = { { 1, 2, 3 }, { 4, 5, 6 } };        
      int array2[][] = { { 1, 2 }, { 4 } };        

      g.drawString( "Values in array1 by row are", 25, 25 );
      printArray( array1, g, 40 );
   
      g.drawString( "Values in array2 by row are", 25, 70 );
      printArray( array2, g, 85 );
   }

   public void printArray( int a[][], Graphics g, int y )
   {
      int x = 25;

      for ( int i = 0; i < a.length; i++ ) {

         for ( int j = 0; j < a[ i ].length; j++ )  {
            g.drawString( String.valueOf( a[ i ][ j ] ), x, y );
            x += 15;
         }

         x = 25;
         y += 15;
      }
   }
}



[1.7] Listing of 'BubbleSort.java'
// This program sorts an array's values into
// ascending order
import java.awt.Graphics;
import java.applet.Applet;

public class BubbleSort extends Applet {
   int a[] = { 2, 6, 4, 8, 10, 12, 89, 68, 45, 37 };
   
   public void paint( Graphics g )
   {
      print( g, "Data items in original order", a, 25, 25 );
        
      sort();

      print( g, "Data items in ascending order", a, 25, 55 );
   }

   public void sort() 
   {   
      int hold;  // temporary holding area for swap

      for ( int pass = 1; pass < a.length; pass++ ) // passes
         for ( int i = 0; i < a.length - 1; i++ ) // one pass   
            if ( a[ i ] > a[ i + 1 ] ) {      // one comparison
               hold = a[i];                   // one swap
               a[ i ] = a[ i + 1 ];
               a[ i + 1 ] = hold;
            }
   }

   public void print( Graphics g, String head, int b[],
                      int x, int y )
   {
      g.drawString( head, x, y ); 
      x += 15;
      y += 15; 
   
      for ( int i = 0; i < b.length; i++ ) {
         g.drawString( String.valueOf( b[ i ] ), x, y );
         x += 20;
      }
   }
}











[2] Strings:
    --------
     A  'string'  is  a sequence of characters.  In  C  and  C++, 
strings are implemented as null-terminated character arrays. Java 
uses  a different approach. It implements strings as  objects  of 
type 'String'.
     Somewhat  unexpectedly, when you create  a string object,  you 
are  creating a string that cannot be changed.  That is,  once  a 
string object has been created, you cannot change the  characters 
that  comprise  that  string.  At first, this may seem  to  be  a 
serious  restriction.   However, such is not the case.   You  can 
still  perform all types of string operations.  It is  just  that 
each time you need an altered version of an existing string, a new 
string  object is created that contains the  modifications.   The 
original string is left unchanged.  This approach is used because 
fixed,  immutable  strings can be  implemented  more  efficiently 
than  changeable  ones.  For those cases in  which  a  modifiable 
string  is desired, there is a companion class to  string  called 
StringBuffer.  StringBuffer objects contain strings that can be 
modified after they are created.
     Both  the  String and StringBuffer classes  are  defined  in 
java.lang.    Thus,   they   are  available   to   all   programs 
automatically.  Both are declared final, which means that neither 
of  these  classes  may  be  subclassed.   This  allows   certain 
optimizations which increase performance to take place on  common 
string operations.
     One  last poiint: To say that the strings within objects  of 
type  String  are  unchangeable means that the  contents  of  the 
String  instance  cannot be changed after it  has  been  created.  
However, a variable declared as a String reference can be changed 
to point at some other String object at any time.

[2.1] Listing of 'StringConstructors.java'
// This program demonstrates the String class constructors.
import java.awt.Graphics;
import java.applet.Applet;

public class StringConstructors extends Applet {
   char charArray[] = { 'b', 'i', 'r', 't', 'h', ' ',
                        'd', 'a', 'y' };
   byte byteArray[] = { 'n', 'e', 'w', ' ',
                        'y', 'e', 'a', 'r' };
   StringBuffer buffer;
   String s, s1, s2, s3, s4, s5, s6, s7;
   
   public void init()
   {
      s = new String( "hello" );
      buffer = new StringBuffer();
      buffer.append( "Welcome to Java Programming!" );

      // use the String constructors
      s1 = new String();
      s2 = new String( s );
      s3 = new String( charArray );
      s4 = new String( charArray, 6, 3 );
      s5 = new String( byteArray, 4, 4 );
      s6 = new String( byteArray );
      s7 = new String( buffer );
   }

   public void paint( Graphics g ) 
   {
      g.drawString( "s1 = " + s1, 25, 25 );
      g.drawString( "s2 = " + s2, 25, 40 );
      g.drawString( "s3 = " + s3, 25, 55 );
      g.drawString( "s4 = " + s4, 25, 70 );
      g.drawString( "s5 = " + s5, 25, 85 );
      g.drawString( "s6 = " + s6, 25, 100 );
      g.drawString( "s7 = " + s7, 25, 115 );
   }
}
[2.2] Listing of 'StringMisc.java'
// This program demonstrates the length, charAt and getChars
// methods of the String class.
//
// Note: Method getChars requires a starting point
// and ending point in the String. The starting point is the
// actual subscript from which copying starts. The ending point
// is one past the subscript at which the copying ends.
import java.awt.Graphics;
import java.applet.Applet;

public class StringMisc extends Applet {
   String s1;
   char charArray[];

   public void init()
   {
      s1 = new String( "hello there" );
      charArray = new char[ 5 ];
   }

   public void paint( Graphics g )
   {
      // output the string
      g.drawString( "s1: " + s1, 25, 25 );

      // test the length method
      g.drawString( "Length of s1: " + s1.length(), 25, 40 );

      // loop through the characters in s1 and display reversed
      g.drawString( "The string reversed is: ", 25, 55 );
      int xPosition = 155;

      for ( int i = s1.length() - 1; i >= 0; i-- ) {
         g.drawString( String.valueOf( s1.charAt( i ) ),
                       xPosition, 55 );
         xPosition += 10;
      }
      // copy characters from string into char array
      s1.getChars( 0, 5, charArray, 0 );
      g.drawString( "The character array is: ", 25, 70 );
      g.drawChars( charArray, 0, charArray.length, 158, 70 );
   }
}

[2.3] Listing of 'StringBufferConstructors.java'
// This program demonstrates the StringBuffer constructors.
import java.awt.Graphics;
import java.applet.Applet;

public class StringBufferConstructors extends Applet {
   StringBuffer buf1, buf2, buf3;
   
   public void init()
   {
      buf1 = new StringBuffer();
      buf2 = new StringBuffer( 10 );
      buf3 = new StringBuffer( "hello" );
   }

   public void paint( Graphics g )
   {
      g.drawString( "buf1 = " + "\"" + buf1.toString() + "\"",
                    25, 25 );
      g.drawString( "buf2 = " + "\"" + buf2.toString() + "\"",
                    25, 40 );
      g.drawString( "buf3 = " + "\"" + buf3.toString() + "\"",
                    25, 55 );
   }
}

[2.4] Listing of 'TokenTest.java'
// Testing the StringTokenizer class of the java.util package
import java.applet.Applet;
import java.util.*;
import java.awt.*;
import java.awt.event.*;

public class TokenTest extends Applet
             implements ActionListener {
   // GUI components
   Label prompt;
   TextField input;
   TextArea output;

   public void init()
   {
      prompt = new Label( "Enter a sentence and press Enter" );
      input = new TextField( 50 );
      input.addActionListener( this );
      output = new TextArea( 10, 30 );
      output.setEditable( false );
      add( prompt );
      add( input );
      add( output );
   }

   public void actionPerformed( ActionEvent e )
   {      
      String stringToTokenize = e.getActionCommand();
      StringTokenizer tokens =
         new StringTokenizer( stringToTokenize );

      output.setText( "" );

      output.append( "Number of elements: " +
         tokens.countTokens() + "\nThe tokens are:\n" );

      while ( tokens.hasMoreTokens() )
         output.append( tokens.nextToken() + "\n" );
   }
}





































