                   ALGORITHM COMPUTERS   Control Structures
                   -------------------   Topic - 5

[1] The Loop Constructs:
    --------------------
     Java  provides  three  loop  constructions.  These  are  the 
while(), do, and for() constructs. Each provides the facility for 
repeating  the execution of a block of code until some  condition 
occurs.

[1.1] The while() Loop
     while(boolean_condition)
     {
          do_something..
          do_something..
     }

Example: Listing of 'WhileCounter.java'
// Counter-controlled repetition
import java.awt.Graphics;
import java.applet.Applet;

public class WhileCounter extends Applet {
   public void paint( Graphics g )
   {
      int counter = 1;             // initialization
      int yPos = 25;

      while ( counter <= 10 ) {    // repetition condition
         g.drawString( Integer.toString( counter ),
                       25, yPos );
         ++counter;                // increment
         yPos += 15;
      }
   }
}

[1.2] The do Loop
     do
     {
          do_something..
     } while(boolean_condition);

Example: Listing of 'DoWhileTest.java'
// Using the do/while repetition structure
import java.awt.Graphics;
import java.applet.Applet;

public class DoWhileTest extends Applet {
   public void paint( Graphics g )
   {
      int counter = 1;
      int xPos = 25;


      do {
         g.drawString( Integer.toString( counter ), xPos, 25 );
         xPos += 15;
      } while ( ++counter <= 10 );
   }
}

[1.3] The for() Loop
     for(init_statement;boolean_condition;iter_expression)
     {
          do_something..
          do_more..
     }

     The  keys to this loop are in three parts contained  in  the 
brackets following the for keyword:

*  The 'init_statement' is executed immediately before the loop 
itself  is  started.  It  is  often  used  to  set  up   starting 
conditions.
*  The 'boolean_condition' is treated exactly the same as in  the 
while()  loop. The body of the loop will be  executed  repeatedly 
until the condition ceases to be true. As with the while()  loop, 
it  is  possible  that the body of a for() loop  might  never  be 
executed.
*  The iter_expression is executed immediately after  the body  of 
the loop, just before the test is performed again. Commonly  this 
is used to increment a loop counter.

Example: Listing of 'ForCounter.java'
// Counter-controlled repetition with the for structure
import java.awt.Graphics;
import java.applet.Applet;

public class ForCounter extends Applet {
   public void paint( Graphics g )
   {
      int yPos = 25;

      // Initialization, repetition condition, and incrementing 
      // are all included in the for structure header. 
      for ( int counter = 1; counter <= 10; counter++ ) {
         g.drawString( Integer.toString( counter ), 25, yPos );
         yPos += 15;
      }
   }
}

[1.4] The break and continue Statements in Loops:
      -------------------------------------------
     Sometimes  you  need to abandon execution of the body  of  a 
loop,  or  perhaps a number of nested loops.  Java  provides  two 
statements, 'break' and 'continue', which can be used instead  of 
goto to achieve this effect.

[1.5] Example for Continue statement:
      -------------------------------
Listing of 'ContinueTest.java'
// Using the continue statement in a for structure
import java.awt.Graphics;
import java.applet.Applet;

public class ContinueTest extends Applet {
   public void paint( Graphics g )
   {
      int xPos = 25;

      for ( int count = 1; count <= 10; count++ ) {
         if ( count == 5 )
            continue;  // skip remaining code in loop
                       // only if count == 5

         g.drawString( Integer.toString( count ), xPos, 25 );
         xPos += 10;
      }

      g.drawString( "Used continue to skip printing 5",
                    25, 40 ); 
   }
}

[1.6] Example for break Statement:
      ----------------------------
Listing of 'BreakTest.java'
// Fig. 3.11: BreakTest.java
// Using the break statement in a for structure
import java.awt.Graphics;
import java.applet.Applet;

public class BreakTest extends Applet {
   public void paint( Graphics g )
   {
      int count, xPos = 25;

      for ( count = 1; count <= 10; count++ ) {
         if ( count == 5 )
            break;  // break loop only if count == 5

         g.drawString( Integer.toString( count ), xPos, 25 );
         xPos += 10;
      }

      g.drawString( "Broke out of loop at count = " + count,
                    25, 40 );
   }
}




[1.7] Example for 'continue' with label:
      ----------------------------------
Listing of 'ContinueLabelTest.java'
// Using the continue statement with a label
import java.awt.Graphics;
import java.applet.Applet;

public class ContinueLabelTest extends Applet {
   public void paint( Graphics g )
   {
      int xPos, yPos = 0;

      nextRow:   // target label of continue statement
         for ( int row = 1; row <= 5; row++ ) {
            xPos = 25;
            yPos += 15;
   
            for ( int column = 1; column <= 10; column++ ) {
   
               if ( column > row )
                  continue nextRow; // next iteration of
                                    // labeled loop
   
               g.drawString( "#", xPos, yPos );
               xPos += 7;
            }
         }
   }
}

[1.8] Example for 'break' with label:
      -------------------------------
Listing of 'BreakLabelTest.java'
// Using the break statement with a label
import java.awt.Graphics;
import java.applet.Applet;

public class BreakLabelTest extends Applet {
   public void paint( Graphics g )
   {
      int xPos, yPos = 0;
      
      stop: {   // labeled compound statement
         for ( int row = 1; row <= 10; row++ ) {
            xPos = 25;
            yPos += 15;         

            for ( int column = 1; column <= 5 ; column++ ) {
               if ( row == 5 )
                  break stop; // jump to end of stop block

               g.drawString( "#", xPos, yPos );
               xPos += 7;
            }
         }
         yPos += 15;
         g.drawString( "Loops terminated normally", 25, yPos );
      }
      yPos += 15;
      g.drawString( "End of paint method", 25, yPos );
   }
}

[2] The Selection Statements:
    -------------------------
     Java  provides a choice of two selection  constructs.  These 
are the if()/else and switch() mechanisms.

[2.1] The if Construct:
      -----------------
     The if statement is java's conditional branch statement.  It 
can  be  used  to route program execution  through  two  differnt 
paths.

The general form of the 'if' statement:

     if (condition) 
          statement1;
     else if(condition)
          statement2;
     .....
     .....
     else statementn;

Example: IfElse.java

// Demonsrate if-else-if statements.

class IfElse
{
        public static void main(String args[])
        {
                int month=4;
                String season;
                                
                if(month==12||month==1||month==2)
                        season="Winter";
                else if(month==3||month==4||month==5)
                        season="Spring";
                else if(month==6||month==7||month==8)
                        season="Summer";                                                        
                else if(month==9||month==10||month==11)
                        season="Autumn";
                else
                        season="Bogus Month";
                                                
                System.out.println("April is in the " + season + ".");
        }
}

[2.2] The switch() Construct:
      -----------------------
     The 'switch' statment is java's multiway branch statment. It 
provides an easy way to dispatch execution to different parts  of 
your code based on the value of an expression.

General form of switch statement:

     switch(expression)
     {
          case value1:
               //statement sequence
               break;
          case value2:
               //statement sequence
               break;
          ....
          ....
          case valueN:
               //statement sequence
               break;
          default:
               //default statement sequence

     }

Example: SampleSwitch.java
// a simple example of the switch.

class SampleSwitch
{
     public static void main(String args[])
     {
          for(int i=0;i<6;i++)
          switch(i)
          {
                case 0:
                    System.out.println("i is zero");
                    break;
                case 1:
                    System.out.println("i is one");
                    break;
                case 2:
                    System.out.println("i is two");
                    break;
                case 3:
                    System.out.println("i is three");
                    break;
                default:
                    System.out.println("i is greater than 3.");
          }
     }
}
     

[2.3] Switch Statement Applet with Action.
------------------------------------------
Listing of SwitchTest.java:
---------------------------

// Fig. 3.7: SwitchTest.java
// Counting letter grades
import java.awt.*;
import java.applet.Applet;
import java.awt.event.*;

public class SwitchTest extends Applet
             implements ActionListener {
   Label prompt;      // label for text field
   TextField input;   // text field to enter grades

   int aCount = 0, bCount = 0, cCount = 0,
       dCount = 0, fCount = 0;

   public void init()
   {
      prompt = new Label( "Enter grade" );
      input = new TextField( 2 );
      input.addActionListener( this );
      add( prompt );
      add( input );
   }

   public void paint( Graphics g )
   {
      g.drawString( "Totals for each letter grade:", 25, 40 );
      g.drawString( "A: " + aCount, 25, 55 );
      g.drawString( "B: " + bCount, 25, 70 );
      g.drawString( "C: " + cCount, 25, 85 );
      g.drawString( "D: " + dCount, 25, 100 );
      g.drawString( "F: " + fCount, 25, 115 );
   }

   public void actionPerformed( ActionEvent e )
   {
      String val = e.getActionCommand();   
      char grade = val.charAt( 0 );  

      showStatus( "" );       // clear status bar area
      input.setText( "" );    // clear input text field

      switch ( grade ) {      

         case 'A': case 'a':  // Grade was uppercase A
            ++aCount;         // or lowercase a.
            break;

         case 'B': case 'b':  // Grade was uppercase B
            ++bCount;         // or lowercase b.
            break;

         case 'C': case 'c':  // Grade was uppercase C
            ++cCount;         // or lowercase c.
            break;

         case 'D': case 'd':  // Grade was uppercase D
            ++dCount;         // or lowercase d.
            break;

         case 'F': case 'f':  // Grade was uppercase F
            ++fCount;         // or lowercase f.
            break;

         default:             // catch all other characters
            showStatus( "Incorrect grade. Enter new grade." );
            break;
      }

      repaint();  // display summary of results
   }
}















